pipeline {
    agent any

    environment {
        DOCKER_NETWORK = "miapp-network"
        MYSQL_CONTAINER = "mysql-test"
        MYSQL_ROOT_PASSWORD = "123456"
        MYSQL_DATABASE = "DevOps"
        MYSQL_USER = "user"
        MYSQL_PASSWORD = "123456"
    }

    stages {
        stage('Preparar entorno') {
            steps {
                script {
                    def netExists = bat(script: 'docker network ls --format "{{.Name}}" | findstr /R /C:"^%DOCKER_NETWORK%$" || exit 0', returnStdout: true).trim()
                    if (!netExists) {
                        bat "docker network create %DOCKER_NETWORK%"
                    }

                    def mysqlExists = bat(script: 'docker ps -a --format "{{.Names}}" | findstr /R /C:"^%MYSQL_CONTAINER%$" || exit 0', returnStdout: true).trim()
                    if (mysqlExists) {
                        bat "docker rm -f %MYSQL_CONTAINER%"
                    }

                    def djangoExists = bat(script: 'docker ps -a --format "{{.Names}}" | findstr /R /C:"^%DJANGO_CONTAINER%$" || exit 0', returnStdout: true).trim()
                    if (djangoExists) {
                        bat "docker rm -f %DJANGO_CONTAINER%"
                    }

                    def filebeatExists = bat(script: 'docker ps -a --format "{{.Names}}" | findstr /R /C:"^%FILEBEAT_CONTAINER%$" || exit 0', returnStdout: true).trim()
                    if (filebeatExists) {
                        bat "docker rm -f %FILEBEAT_CONTAINER%"
                    }

                    def elasticExists = bat(script: 'docker ps -a --format "{{.Names}}" | findstr /R /C:"^elasticsearch$" || exit 0', returnStdout: true).trim()
                    if (elasticExists) {
                        bat "docker rm -f elasticsearch"
                    }
                }
            }
        }

        stage('Levantar MySQL') {
            steps {
                bat """
                docker run -d --name %MYSQL_CONTAINER% ^
                    --network %DOCKER_NETWORK% ^
                    -e MYSQL_ROOT_PASSWORD=%MYSQL_ROOT_PASSWORD% ^
                    -e MYSQL_DATABASE=%MYSQL_DATABASE% ^
                    -e MYSQL_USER=%MYSQL_USER% ^
                    -e MYSQL_PASSWORD=%MYSQL_PASSWORD% ^
                    -p 3306:3306 ^
                    mysql:8.0
                """
            }
        }

        stage('Esperar MySQL') {
            steps {
                script {
                    echo 'Esperando a que MySQL esté listo...'
                    retry(15) {
                        sleep 5
                        bat "docker exec %MYSQL_CONTAINER% mysqladmin ping -h localhost -u root -p%MYSQL_ROOT_PASSWORD%"
                    }
                }
            }
        }

        stage('Construir imagen de Django') {
            steps {
                bat "docker build -t miapp-django ."
            }
        }
    }

    post {
        success {
            echo '✅ Imagen construida correctamente.'
            build job: 'DevOpsBackDeploy'
        }
        failure {
            echo '❌ Falló la construcción.'
        }
    }
}